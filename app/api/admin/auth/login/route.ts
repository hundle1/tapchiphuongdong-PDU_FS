import { NextResponse } from 'next/server';
import { authenticateUser, generateToken } from '@/lib/auth';
import { cookies } from 'next/headers';

export const dynamic = "force-dynamic";

export async function POST(request: Request) {
  try {
    const cookieStore = cookies();

    const { email, password } = await request.json();
    console.log("üì© [API] Login request body:", { email, password });

    if (!email || !password) {
      console.warn("‚ö†Ô∏è Thi·∫øu email ho·∫∑c password");
      return NextResponse.json(
        { error: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' },
        { status: 400 }
      );
    }

    let user;
    try {
      user = await authenticateUser(email, password);
      console.log("üîç [API] authenticateUser tr·∫£ v·ªÅ:", user);
    } catch (err) {
      console.error("‚ùå [API] L·ªói trong authenticateUser:", err);
      return NextResponse.json(
        { error: 'L·ªói khi x√°c th·ª±c t√†i kho·∫£n' },
        { status: 500 }
      );
    }

    if (!user) {
      console.warn("üö´ Kh√¥ng t√¨m th·∫•y user ho·∫∑c sai m·∫≠t kh·∫©u");
      return NextResponse.json(
        { error: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c' },
        { status: 401 }
      );
    }

    if (user.role !== 'ADMIN' && user.role !== 'SUPER_ADMIN') {
      console.warn("üö´ User kh√¥ng c√≥ quy·ªÅn:", user.role);
      return NextResponse.json(
        { error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' },
        { status: 403 }
      );
    }

    let token;
    try {
      token = generateToken(user.id, user.role);
      console.log("‚úÖ [API] Token ƒë√£ t·∫°o:", token);
    } catch (err) {
      console.error("‚ùå [API] L·ªói khi generateToken:", err);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ t·∫°o token' },
        { status: 500 }
      );
    }

    try {
      cookieStore.set("admin_token", token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        maxAge: 7 * 24 * 60 * 60,
      });
      console.log("üç™ [API] Cookie ƒë√£ set th√†nh c√¥ng");
    } catch (err) {
      console.error("‚ùå [API] L·ªói khi set cookie:", err);
      return NextResponse.json(
        { error: 'Kh√¥ng th·ªÉ l∆∞u cookie' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
      },
    });
  } catch (error) {
    console.error('‚ùå [API] Login error ngo√†i c√πng:', error);
    return NextResponse.json(
      { error: 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p 500' },
      { status: 500 }
    );
  }
}
